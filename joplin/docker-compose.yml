# Overview
# joplin notes server

version: '3'

name: ${PROJECT_NAME}  # project name (aka stack)

services:

  # postgres db
  db:
    image: postgres:16
    container_name: ${PROJECT_NAME}-db

    volumes:
      - ./db/data/postgres:/var/lib/postgresql/data

    ports:
      - "${DB_PORT}:5432"

    restart: unless-stopped

    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}

    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      interval: 10s
      timeout: 3s
      retries: 3

    networks:
      - joplin

  # joplin
  app:
    image: joplin/server:latest
    container_name: ${PROJECT_NAME}-app

    depends_on:
      db:
        condition: service_healthy

    restart: unless-stopped

    environment:
      - APP_PORT=${APP_PORT}
      - APP_BASE_URL=${APP_BASE_URL}

      - DB_CLIENT=${DB_CLIENT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DATABASE=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"

      # routers

      ## http
      - "traefik.http.routers.${PROJECT_NAME}.entrypoints=web"
      - "traefik.http.routers.${PROJECT_NAME}.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)"

      ## https
      - "traefik.http.routers.${PROJECT_NAME}-secure.entrypoints=websecure"
      - "traefik.http.routers.${PROJECT_NAME}-secure.rule=Host(`${SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls=true"
      - "traefik.http.routers.${PROJECT_NAME}-secure.tls.certresolver=cloudflare"
      - "traefik.http.routers.${PROJECT_NAME}-secure.service=${PROJECT_NAME}"

      # middlewares
      - "traefik.http.routers.${PROJECT_NAME}.middlewares=https-redirect@file"

      # # services
      - "traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=${APP_PORT}"

    networks:
      - joplin
      - web

  # backup data
  backup:
    build:
      context: ./backup

    container_name: ${PROJECT_NAME}-backup

    depends_on:
      db:
        condition: service_healthy

    restart: unless-stopped

    volumes:
      # access host's docker serer
      - /usr/bin/docker:/usr/bin/docker
      - /var/run/docker.sock:/var/run/docker.sock

      # backup dir
      - ${CARBO_CLOUD}/Notes/joplin/backup:/home/backup/data

    environment:
      - DB_CONTAINER_NAME=${PROJECT_NAME}-db

    networks:
      - joplin

networks:
  joplin:
  web:
    external: true